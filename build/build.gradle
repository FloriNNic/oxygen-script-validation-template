task initValidation() {
    doFirst {
            String key = System.getenv('SCRIPTING_LICENSE_KEY')
            if (key == null) {
                throw new TaskExecutionException(it, new Exception("You need a valid Oxygen Scripting license key."))
            } else {
                new File("${projectDir}/oxygen/scriptinglicensekey.txt").write(key.replaceAll("  ", "\n"))
            }
    }
    doLast {
        project.exec {
            workingDir "${projectDir}/oxygen/scripts"
            commandLine 'chmod', '700', 'validate.sh'
        }
    }
}

task runValidation(type: Exec, dependsOn: [initValidation]) {
    // Compute the validation directory depending on where the script is started from.
    String valDir = "${projectDir}" + (localBuild.toBoolean() ? "/../validation/" : "/../../") + validationDir
    workingDir "${projectDir}/oxygen"
    try {
        commandLine "${projectDir}/oxygen/scripts/validate.sh",
                valDir,
                "-sf", "${projectDir}/../validateScript.xpr",
                "-rft", "html",
                "-rf", "${projectDir}/../report/validationReport.html"
    } catch (org.gradle.api.tasks.TaskExecutionException ex){
        println "Directory/file not found: " + validationDir
    }

    doLast {
        if (executionResult.get() != 0) {
            println "Validation problems found. See the report for more details."
            // throw new TaskExecutionException(it, new Exception("Validation failed, see task output for details."))
        }
            // Replace file locations from GitHub VM with locations from repository.
            ant.replace(
                    file: '../report/validationReport.html',
                    token: 'file:/home/runner/work/oxygen-sample-validation-script/oxygen-sample-validation-script',
                    value:  repoMainBranchUrl
            )
            ant.replace(
                    file: '../report/validationReport.html',
                    token: '/home/runner/work',
                    value:  ''
            )

    }
}

defaultTasks 'runValidation'

