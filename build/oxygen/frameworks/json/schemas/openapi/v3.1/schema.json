{
    "$id": "https://spec.openapis.org/oas/3.1/schema/2022-02-27",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "description": "The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0",
    "type": "object",
    "properties": {
        "openapi": {
            "description": "REQUIRED. This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document uses. The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is not related to the API info.version string.",
            "type": "string",
            "pattern": "^3\\.1\\.\\d+(-.+)?$"
        },
        "info": {
            "description": "REQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.",
            "$ref": "#/$defs/info"
        },
        "jsonSchemaDialect": {
            "description": "The default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.",
            "type": "string",
            "format": "uri",
            "default": "https://spec.openapis.org/oas/3.1/dialect/base"
        },
        "servers": {
            "description": "An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.",
            "type": "array",
            "items": {"$ref": "#/$defs/server"},
            "default": [
                {"url": "/"}
            ]
        },
        "paths": {
            "description": "The available paths and operations for the API.",
            "$ref": "#/$defs/paths"
        },
        "webhooks": {
            "description": "The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.",
            "type": "object",
            "additionalProperties": {"$ref": "#/$defs/path-item-or-reference"}
        },
        "components": {
            "description": "An element to hold various schemas for the document.",
            "$ref": "#/$defs/components"
        },
        "security": {
            "description": "A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.",
            "type": "array",
            "items": {"$ref": "#/$defs/security-requirement"}
        },
        "tags": {
            "description": "A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools\u2019 logic. Each tag name in the list MUST be unique.",
            "type": "array",
            "items": {"$ref": "#/$defs/tag"}
        },
        "externalDocs": {
            "description": "Additional external documentation.",
            "$ref": "#/$defs/external-documentation"
        }
    },
    "required": [
        "openapi",
        "info"
    ],
    "anyOf": [
        {
            "required": ["paths"]
        },
        {
            "required": ["components"]
        },
        {
            "required": ["webhooks"]
        }
    ],
    "$ref": "#/$defs/specification-extensions",
    "unevaluatedProperties": false,
    "$defs": {
        "info": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#info-object",
            "type": "object",
            "properties": {
                "title": {
                    "description": "REQUIRED. The title of the API.",
                    "type": "string"
                },
                "summary": {
                    "description": "A short summary of the API.",
                    "type": "string"
                },
                "description": {
                    "description": "A description of the API. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "termsOfService": {
                    "description": "A URL to the Terms of Service for the API. This MUST be in the form of a URL.",
                    "type": "string",
                    "format": "uri"
                },
                "contact": {
                    "description": "The contact information for the exposed API.",
                    "$ref": "#/$defs/contact"
                },
                "license": {
                    "description": "The license information for the exposed API.",
                    "$ref": "#/$defs/license"
                },
                "version": {
                    "description": "REQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).",
                    "type": "string"
                }
            },
            "required": [
                "title",
                "version"
            ],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "contact": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#contact-object",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The identifying name of the contact person/organization.",
                    "type": "string"
                },
                "url": {
                    "description": "The URL pointing to the contact information. This MUST be in the form of a URL.",
                    "type": "string",
                    "format": "uri"
                },
                "email": {
                    "description": "The email address of the contact person/organization. This MUST be in the form of an email address.",
                    "type": "string",
                    "format": "email"
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "license": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#license-object",
            "type": "object",
            "properties": {
                "name": {
                    "description": "REQUIRED. The license name used for the API.",
                    "type": "string"
                },
                "identifier": {
                    "description": "An SPDX license expression for the API. The identifier field is mutually exclusive of the url field.",
                    "type": "string"
                },
                "url": {
                    "description": "A URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": ["name"],
            "oneOf": [
                {
                    "required": ["identifier"]
                },
                {
                    "required": ["url"]
                }
            ],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "server": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#server-object",
            "type": "object",
            "properties": {
                "url": {
                    "description": "REQUIRED. A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.",
                    "type": "string",
                    "format": "uri-reference"
                },
                "description": {
                    "description": "An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "variables": {
                    "description": "A map between a variable name and its value. The value is used for substitution in the server\u2019s URL template.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/server-variable"}
                }
            },
            "required": ["url"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "server-variable": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#server-variable-object",
            "type": "object",
            "properties": {
                "enum": {
                    "description": "An enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.",
                    "type": "array",
                    "items": {"type": "string"},
                    "minItems": 1
                },
                "default": {
                    "description": "REQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object\u2019s treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum\u2019s values.",
                    "type": "string"
                },
                "description": {
                    "description": "An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                }
            },
            "required": ["default"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "components": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#components-object",
            "description": "An element to hold various schemas for the document.",
            "type": "object",
            "properties": {
                "schemas": {
                    "description": "An object to hold reusable Schema Objects.",
                    "type": "object",
                    "additionalProperties": {"$dynamicRef": "#/$defs/schema"}
                },
                "responses": {
                    "description": "An object to hold reusable Response Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/response-or-reference"}
                },
                "parameters": {
                    "description": "An object to hold reusable Parameter Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/parameter-or-reference"}
                },
                "examples": {
                    "description": "An object to hold reusable Example Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/example-or-reference"}
                },
                "requestBodies": {
                    "description": "An object to hold reusable Request Body Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/request-body-or-reference"}
                },
                "headers": {
                    "description": "An object to hold reusable Header Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/header-or-reference"}
                },
                "securitySchemes": {
                    "description": "An object to hold reusable Security Scheme Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/security-scheme-or-reference"}
                },
                "links": {
                    "description": "An object to hold reusable Link Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/link-or-reference"}
                },
                "callbacks": {
                    "description": "An object to hold reusable Callback Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/callbacks-or-reference"}
                },
                "pathItems": {
                    "description": "An object to hold reusable pathItem Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/path-item-or-reference"}
                }
            },
            "patternProperties": {
                "^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$": {
                    "$comment": "Enumerating all of the property names in the regex above is necessary for unevaluatedProperties to work as expected",
                    "propertyNames": {"pattern": "^[a-zA-Z0-9._-]+$"}
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "paths": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#paths-object",
            "type": "object",
            "patternProperties": {
                "^/": {
                    "description": "A relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object\u2019s url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it\u2019s up to the tooling to decide which one to use.",
                    "$ref": "#/$defs/path-item"
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "path-item": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#path-item-object",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "An optional, string summary, intended to apply to all operations in this path.",
                    "type": "string"
                },
                "description": {
                    "description": "An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "servers": {
                    "description": "An alternative server array to service all operations in this path.",
                    "type": "array",
                    "items": {"$ref": "#/$defs/server"}
                },
                "parameters": {
                    "description": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object\u2019s components/parameters.",
                    "type": "array",
                    "items": {"$ref": "#/$defs/parameter-or-reference"}
                },
                "get": {"$ref": "#/$defs/operation"},
                "put": {"$ref": "#/$defs/operation"},
                "post": {"$ref": "#/$defs/operation"},
                "delete": {"$ref": "#/$defs/operation"},
                "options": {"$ref": "#/$defs/operation"},
                "head": {"$ref": "#/$defs/operation"},
                "patch": {"$ref": "#/$defs/operation"},
                "trace": {"$ref": "#/$defs/operation"}
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "path-item-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/path-item"}
        },
        "operation": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#operation-object",
            "type": "object",
            "properties": {
                "tags": {
                    "description": "A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.",
                    "type": "array",
                    "items": {"type": "string"}
                },
                "summary": {
                    "description": "A short summary of what the operation does.",
                    "type": "string"
                },
                "description": {
                    "description": "A verbose explanation of the operation behavior. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "externalDocs": {
                    "description": "Additional external documentation for this operation.",
                    "$ref": "#/$defs/external-documentation"
                },
                "operationId": {
                    "description": "Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.",
                    "type": "string"
                },
                "parameters": {
                    "description": "A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object\u2019s components/parameters.",
                    "type": "array",
                    "items": {"$ref": "#/$defs/parameter-or-reference"}
                },
                "requestBody": {
                    "description": "The request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification [RFC7231] has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET, HEAD and DELETE), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.",
                    "$ref": "#/$defs/request-body-or-reference"
                },
                "responses": {
                    "description": "The list of possible responses as they are returned from executing this operation.",
                    "$ref": "#/$defs/responses"
                },
                "callbacks": {
                    "description": "A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/callbacks-or-reference"}
                },
                "deprecated": {
                    "description": "Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.",
                    "default": false,
                    "type": "boolean"
                },
                "security": {
                    "description": "A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.",
                    "type": "array",
                    "items": {"$ref": "#/$defs/security-requirement"}
                },
                "servers": {
                    "description": "An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.",
                    "type": "array",
                    "items": {"$ref": "#/$defs/server"}
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "external-documentation": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#external-documentation-object",
            "type": "object",
            "properties": {
                "description": {
                    "description": "A description of the target documentation. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "url": {
                    "description": "REQUIRED. The URL for the target documentation. This MUST be in the form of a URL.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "required": ["url"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "parameter": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#parameter-object",
            "type": "object",
            "properties": {
                "name": {
                    "description": "REQUIRED. The name of the parameter. Parameter names are case sensitive. If in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information. If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored. For all other cases, the name corresponds to the parameter name used by the in property.",
                    "type": "string"
                },
                "in": {
                    "description": "REQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".",
                    "enum": [
                        "query",
                        "header",
                        "path",
                        "cookie"
                    ]
                },
                "description": {
                    "description": "A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "required": {
                    "description": "Determines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.",
                    "default": false,
                    "type": "boolean"
                },
                "deprecated": {
                    "description": "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.",
                    "default": false,
                    "type": "boolean"
                },
                "schema": {"$dynamicRef": "#/$defs/schema"},
                "content": {
                    "$ref": "#/$defs/content",
                    "minProperties": 1,
                    "maxProperties": 1
                }
            },
            "required": [
                "name",
                "in"
            ],
            "oneOf": [
                {
                    "required": ["schema"]
                },
                {
                    "required": ["content"]
                }
            ],
            "if": {
                "properties": {
                    "in": {"const": "query"}
                },
                "required": ["in"]
            },
            "then": {
                "properties": {
                    "allowEmptyValue": {
                        "default": false,
                        "type": "boolean"
                    }
                }
            },
            "dependentSchemas": {
                "schema": {
                    "properties": {
                        "style": {
                            "description": "Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.",
                            "type": "string"
                        },
                        "explode": {
                            "description": "When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.",
                            "type": "boolean"
                        }
                    },
                    "allOf": [
                        {"$ref": "#/$defs/examples"},
                        {"$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path"},
                        {"$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-header"},
                        {"$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-query"},
                        {"$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-cookie"},
                        {"$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-form"}
                    ],
                    "$defs": {
                        "styles-for-path": {
                            "if": {
                                "properties": {
                                    "in": {"const": "path"}
                                },
                                "required": ["in"]
                            },
                            "then": {
                                "properties": {
                                    "name": {"pattern": "[^/#?]+$"},
                                    "style": {
                                        "default": "simple",
                                        "enum": [
                                            "matrix",
                                            "label",
                                            "simple"
                                        ]
                                    },
                                    "required": {"const": true}
                                },
                                "required": ["required"]
                            }
                        },
                        "styles-for-header": {
                            "if": {
                                "properties": {
                                    "in": {"const": "header"}
                                },
                                "required": ["in"]
                            },
                            "then": {
                                "properties": {
                                    "style": {
                                        "default": "simple",
                                        "const": "simple"
                                    }
                                }
                            }
                        },
                        "styles-for-query": {
                            "if": {
                                "properties": {
                                    "in": {"const": "query"}
                                },
                                "required": ["in"]
                            },
                            "then": {
                                "properties": {
                                    "style": {
                                        "default": "form",
                                        "enum": [
                                            "form",
                                            "spaceDelimited",
                                            "pipeDelimited",
                                            "deepObject"
                                        ]
                                    },
                                    "allowReserved": {
                                        "default": false,
                                        "type": "boolean"
                                    }
                                }
                            }
                        },
                        "styles-for-cookie": {
                            "if": {
                                "properties": {
                                    "in": {"const": "cookie"}
                                },
                                "required": ["in"]
                            },
                            "then": {
                                "properties": {
                                    "style": {
                                        "default": "form",
                                        "const": "form"
                                    }
                                }
                            }
                        },
                        "styles-for-form": {
                            "if": {
                                "properties": {
                                    "style": {"const": "form"}
                                },
                                "required": ["style"]
                            },
                            "then": {
                                "properties": {
                                    "explode": {"default": true}
                                }
                            },
                            "else": {
                                "properties": {
                                    "explode": {"default": false}
                                }
                            }
                        }
                    }
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "parameter-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/parameter"}
        },
        "request-body": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#request-body-object",
            "type": "object",
            "properties": {
                "description": {
                    "description": "A brief description of the request body. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "content": {
                    "description": "REQUIRED. The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*",
                    "$ref": "#/$defs/content"
                },
                "required": {
                    "description": "Determines if the request body is required in the request. Defaults to false.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": ["content"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "request-body-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/request-body"}
        },
        "content": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#fixed-fields-10",
            "description": "REQUIRED. The content of the request body. The key is a media type or media type range and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*",
            "type": "object",
            "additionalProperties": {"$ref": "#/$defs/media-type"},
            "propertyNames": {"format": "media-range"}
        },
        "media-type": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#media-type-object",
            "type": "object",
            "properties": {
                "schema": {
                    "description": "The schema defining the content of the request, response, or parameter.",
                    "$dynamicRef": "#/$defs/schema"
                },
                "encoding": {
                    "description": "A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/encoding"}
                }
            },
            "allOf": [
                {"$ref": "#/$defs/specification-extensions"},
                {"$ref": "#/$defs/examples"}
            ],
            "unevaluatedProperties": false
        },
        "encoding": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#encoding-object",
            "type": "object",
            "properties": {
                "contentType": {
                    "description": "The Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json; for array \u2013 the default is defined based on the inner type; for all other cases the default is application/octet-stream. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.",
                    "type": "string",
                    "format": "media-range"
                },
                "headers": {
                    "description": "A map allowing additional information to be provided as headers, for example Content-Disposition. Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/header-or-reference"}
                },
                "style": {
                    "description": "Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                    "default": "form",
                    "enum": [
                        "form",
                        "spaceDelimited",
                        "pipeDelimited",
                        "deepObject"
                    ]
                },
                "explode": {
                    "description": "When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                    "type": "boolean"
                },
                "allowReserved": {
                    "description": "Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986] :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "allOf": [
                {"$ref": "#/$defs/specification-extensions"},
                {"$ref": "#/$defs/encoding/$defs/explode-default"}
            ],
            "unevaluatedProperties": false,
            "$defs": {
                "explode-default": {
                    "if": {
                        "properties": {
                            "style": {"const": "form"}
                        },
                        "required": ["style"]
                    },
                    "then": {
                        "properties": {
                            "explode": {"default": true}
                        }
                    },
                    "else": {
                        "properties": {
                            "explode": {"default": false}
                        }
                    }
                }
            }
        },
        "responses": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#responses-object",
            "type": "object",
            "properties": {
                "default": {
                    "description": "The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.",
                    "$ref": "#/$defs/response-or-reference"
                }
            },
            "patternProperties": {
                "^[1-5](?:[0-9]{2}|XX)$": {"$ref": "#/$defs/response-or-reference"}
            },
            "minProperties": 1,
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "response": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#response-object",
            "type": "object",
            "properties": {
                "description": {
                    "description": "REQUIRED. A description of the response. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "headers": {
                    "description": "Maps a header name to its definition. [RFC7230] states header names are case insensitive. If a response header is defined with the name \"Content-Type\", it SHALL be ignored.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/header-or-reference"}
                },
                "content": {
                    "description": "A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*",
                    "$ref": "#/$defs/content"
                },
                "links": {
                    "description": "A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.",
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/link-or-reference"}
                }
            },
            "required": ["description"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "response-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/response"}
        },
        "callbacks": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#callback-object",
            "type": "object",
            "$ref": "#/$defs/specification-extensions",
            "additionalProperties": {
                "description": "A Path Item Object, or a reference to one, used to define a callback request and expected responses. A complete example is available.",
                "$ref": "#/$defs/path-item-or-reference"
            }
        },
        "callbacks-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/callbacks"}
        },
        "example": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#example-object",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Short description for the example.",
                    "type": "string"
                },
                "description": {
                    "description": "Long description for the example. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "value": {"description": "Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary."},
                "externalValue": {
                    "description": "A URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References.",
                    "type": "string",
                    "format": "uri"
                }
            },
            "not": {
                "required": [
                    "value",
                    "externalValue"
                ]
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "example-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/example"}
        },
        "link": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#link-object",
            "type": "object",
            "properties": {
                "operationRef": {
                    "description": "A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References.",
                    "type": "string",
                    "format": "uri-reference"
                },
                "operationId": {
                    "description": "The name of an existing, resolvable OAS operation, as defined with a unique operationId. This field is mutually exclusive of the operationRef field.",
                    "type": "string"
                },
                "parameters": {
                    "description": "A map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).",
                    "$ref": "#/$defs/map-of-strings"
                },
                "requestBody": {
                    "description": "A literal value or {expression} to use as a request body when calling the target operation."
                },
                "description": {
                    "description": "A description of the link. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "server": {
                    "description": "A server object to be used by the target operation.",
                    "$ref": "#/$defs/server"
                }
            },
            "oneOf": [
                {
                    "required": ["operationRef"]
                },
                {
                    "required": ["operationId"]
                }
            ],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "link-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/link"}
        },
        "header": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#header-object",
            "type": "object",
            "properties": {
                "description": {"type": "string"},
                "required": {
                    "default": false,
                    "type": "boolean"
                },
                "deprecated": {
                    "default": false,
                    "type": "boolean"
                },
                "schema": {"$dynamicRef": "#/$defs/schema"},
                "content": {
                    "$ref": "#/$defs/content",
                    "minProperties": 1,
                    "maxProperties": 1
                }
            },
            "oneOf": [
                {
                    "required": ["schema"]
                },
                {
                    "required": ["content"]
                }
            ],
            "dependentSchemas": {
                "schema": {
                    "properties": {
                        "style": {
                            "default": "simple",
                            "const": "simple"
                        },
                        "explode": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "$ref": "#/$defs/examples"
                }
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "header-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/header"}
        },
        "tag": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#tag-object",
            "type": "object",
            "properties": {
                "name": {
                    "description": "REQUIRED. The name of the tag.",
                    "type": "string"
                },
                "description": {
                    "description": "A description for the tag. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                },
                "externalDocs": {
                    "description": "Additional external documentation for this tag.",
                    "$ref": "#/$defs/external-documentation"
                }
            },
            "required": ["name"],
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false
        },
        "reference": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#reference-object",
            "type": "object",
            "properties": {
                "$ref": {
                    "description": "REQUIRED. The reference identifier. This MUST be in the form of a URI.",
                    "type": "string",
                    "format": "uri-reference"
                },
                "summary": {
                    "description": "A short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.",
                    "type": "string"
                },
                "description": {
                    "description": "A description which by default SHOULD override that of the referenced component. CommonMark syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.",
                    "type": "string"
                }
            },
            "unevaluatedProperties": false
        },
        "schema": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#schema-object",
            "$ref": "https://json-schema.org/draft/2020-12/schema"
        },
        "security-scheme": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#security-scheme-object",
            "type": "object",
            "properties": {
                "type": {
                    "description": "REQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".",
                    "enum": [
                        "apiKey",
                        "http",
                        "mutualTLS",
                        "oauth2",
                        "openIdConnect"
                    ]
                },
                "description": {
                    "description": "A description for security scheme. CommonMark syntax MAY be used for rich text representation.",
                    "type": "string"
                }
            },
            "required": ["type"],
            "allOf": [
                {"$ref": "#/$defs/specification-extensions"},
                {"$ref": "#/$defs/security-scheme/$defs/type-apikey"},
                {"$ref": "#/$defs/security-scheme/$defs/type-http"},
                {"$ref": "#/$defs/security-scheme/$defs/type-http-bearer"},
                {"$ref": "#/$defs/security-scheme/$defs/type-oauth2"},
                {"$ref": "#/$defs/security-scheme/$defs/type-oidc"}
            ],
            "unevaluatedProperties": false,
            "$defs": {
                "type-apikey": {
                    "if": {
                        "properties": {
                            "type": {"const": "apiKey"}
                        },
                        "required": ["type"]
                    },
                    "then": {
                        "properties": {
                            "name": {
                                "description": "REQUIRED. The name of the header, query or cookie parameter to be used.",
                                "type": "string"
                            },
                            "in": {
                                "description": "REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".",
                                "enum": [
                                    "query",
                                    "header",
                                    "cookie"
                                ]
                            }
                        },
                        "required": [
                            "name",
                            "in"
                        ]
                    }
                },
                "type-http": {
                    "if": {
                        "properties": {
                            "type": {"const": "http"}
                        },
                        "required": ["type"]
                    },
                    "then": {
                        "properties": {
                            "scheme": {
                                "description": "REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235]. The values used SHOULD be registered in the IANA Authentication Scheme registry.",
                                "type": "string"
                            }
                        },
                        "required": ["scheme"]
                    }
                },
                "type-http-bearer": {
                    "if": {
                        "properties": {
                            "type": {"const": "http"},
                            "scheme": {
                                "type": "string",
                                "pattern": "^[Bb][Ee][Aa][Rr][Ee][Rr]$"
                            }
                        },
                        "required": [
                            "type",
                            "scheme"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bearerFormat": {
                                "description": "A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.",
                                "type": "string"
                            }
                        }
                    }
                },
                "type-oauth2": {
                    "if": {
                        "properties": {
                            "type": {"const": "oauth2"}
                        },
                        "required": ["type"]
                    },
                    "then": {
                        "properties": {
                            "flows": {
                                "description": "REQUIRED. An object containing configuration information for the flow types supported.",
                                "$ref": "#/$defs/oauth-flows"
                            }
                        },
                        "required": ["flows"]
                    }
                },
                "type-oidc": {
                    "if": {
                        "properties": {
                            "type": {"const": "openIdConnect"}
                        },
                        "required": ["type"]
                    },
                    "then": {
                        "properties": {
                            "openIdConnectUrl": {
                                "description": "REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.",
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": ["openIdConnectUrl"]
                    }
                }
            }
        },
        "security-scheme-or-reference": {
            "if": {
                "type": "object",
                "required": ["$ref"]
            },
            "then": {"$ref": "#/$defs/reference"},
            "else": {"$ref": "#/$defs/security-scheme"}
        },
        "oauth-flows": {
            "type": "object",
            "properties": {
                "implicit": {"$ref": "#/$defs/oauth-flows/$defs/implicit"},
                "password": {"$ref": "#/$defs/oauth-flows/$defs/password"},
                "clientCredentials": {"$ref": "#/$defs/oauth-flows/$defs/client-credentials"},
                "authorizationCode": {"$ref": "#/$defs/oauth-flows/$defs/authorization-code"}
            },
            "$ref": "#/$defs/specification-extensions",
            "unevaluatedProperties": false,
            "$defs": {
                "implicit": {
                    "type": "object",
                    "properties": {
                        "authorizationUrl": {
                            "description": "REQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "refreshUrl": {
                            "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "scopes": {
                            "description": "REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.",
                            "$ref": "#/$defs/map-of-strings"
                        }
                    },
                    "required": [
                        "authorizationUrl",
                        "scopes"
                    ],
                    "$ref": "#/$defs/specification-extensions",
                    "unevaluatedProperties": false
                },
                "password": {
                    "type": "object",
                    "properties": {
                        "tokenUrl": {
                            "description": "REQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "refreshUrl": {
                            "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "scopes": {
                            "description": "REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.",
                            "$ref": "#/$defs/map-of-strings"
                        }
                    },
                    "required": [
                        "tokenUrl",
                        "scopes"
                    ],
                    "$ref": "#/$defs/specification-extensions",
                    "unevaluatedProperties": false
                },
                "client-credentials": {
                    "type": "object",
                    "properties": {
                        "tokenUrl": {
                            "description": "REQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "refreshUrl": {
                            "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "scopes": {"$ref": "#/$defs/map-of-strings"}
                    },
                    "required": [
                        "tokenUrl",
                        "scopes"
                    ],
                    "$ref": "#/$defs/specification-extensions",
                    "unevaluatedProperties": false
                },
                "authorization-code": {
                    "type": "object",
                    "properties": {
                        "authorizationUrl": {
                            "description": "REQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "tokenUrl": {
                            "description": "REQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "refreshUrl": {
                            "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.",
                            "type": "string",
                            "format": "uri"
                        },
                        "scopes": {
                            "description": "REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.",
                            "$ref": "#/$defs/map-of-strings"
                        }
                    },
                    "required": [
                        "authorizationUrl",
                        "tokenUrl",
                        "scopes"
                    ],
                    "$ref": "#/$defs/specification-extensions",
                    "unevaluatedProperties": false
                }
            }
        },
        "security-requirement": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#security-requirement-object",
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {"type": "string"}
            }
        },
        "specification-extensions": {
            "$comment": "https://spec.openapis.org/oas/v3.1.0#specification-extensions",
            "patternProperties": {"^x-": true}
        },
        "examples": {
            "properties": {
                "example": true,
                "examples": {
                    "type": "object",
                    "additionalProperties": {"$ref": "#/$defs/example-or-reference"}
                }
            }
        },
        "map-of-strings": {
            "type": "object",
            "additionalProperties": {"type": "string"}
        }
    }
}